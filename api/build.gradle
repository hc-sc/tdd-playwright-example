plugins {
  id 'war'
  id 'org.springframework.boot' version '2.2.1.RELEASE'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

// pulls out properties from a global properties file
Properties env = new Properties()
File subPropertiesFile = new File("$projectDir/env.properties")
subPropertiesFile.withInputStream {
  env.load(it)
}

// define environment and application settings
def applicationName = env.APPLICATION_NAME
def buildNumber = env.APPLICATION_BUILD_NUMBER
group = env.APPLICATION_GROUP
version = env.APPLICATION_VERSION
def javaVersion = JavaVersion.toVersion(env.JAVA_VERSION)
sourceCompatibility = javaVersion
targetCompatibility = javaVersion
compileJava.options.encoding = env.ENCODING

def archiveName = "${applicationName}##${version + '.' + buildNumber}"

def profiles

bootJar {
  archiveFileName = "${archiveName}.jar"
}

bootWar {
  archiveFileName = "${archiveName}.war"
}

test {
  useJUnitPlatform()
}

configurations {
  developmentOnly
  compileOnly {
    extendsFrom annotationProcessor
  }
}

ext {
  H2_VERSION = "1.4.+"
  JUNIT_VERSION = "5.3.1"
  MAPSTRUCT_VERSION = '1.3.1.Final'
  MOCKITO_VERSION = '2.18.3'
  RESTASSURED_VERSION = '4.1.2'
  XML_VERSION = '2.+'
}

compileJava {
    options.compilerArgs += [
        '-Amapstruct.defaultComponentModel=spring'
    ]
}

dependencies {
  runtimeOnly "com.h2database:h2"
  implementation project(':common')
  annotationProcessor "jakarta.xml.bind:jakarta.xml.bind-api:$XML_VERSION" // JAXB annotations
  annotationProcessor "org.mapstruct:mapstruct-processor:$MAPSTRUCT_VERSION" // easier/faster common
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
  annotationProcessor "org.projectlombok:lombok" // annotations for getters/setters/ctors/equals/hashCode
  developmentOnly "org.springframework.boot:spring-boot-devtools" // better dev experience in bootRun
  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml" // can produce XML responses
  implementation "org.mapstruct:mapstruct:$MAPSTRUCT_VERSION" // easier/faster common
  implementation "org.springframework.boot:spring-boot-starter-actuator" // health checks
  implementation "org.springframework.boot:spring-boot-starter-data-jpa" // persistance and validation with hibernate
  implementation "org.springframework.boot:spring-boot-starter-web" // allows for 'controllers'
  providedRuntime "org.springframework.boot:spring-boot-starter-tomcat" // set to 'providedRuntime' to allow both jar/war deploys
  testAnnotationProcessor "org.mapstruct:mapstruct-processor:$MAPSTRUCT_VERSION" // easier/faster common
  testImplementation "org.mockito:mockito-junit-jupiter:$MOCKITO_VERSION"
  testImplementation "io.rest-assured:rest-assured-all:$RESTASSURED_VERSION" // easier REST testing
  testImplementation "io.rest-assured:spring-mock-mvc:3.3.0" // test mocks
	testImplementation ("org.springframework.boot:spring-boot-starter-test") { // allows for SpringBootTest
  testImplementation "org.junit.jupiter:junit-jupiter:5.4.0" // remove?
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
	}

  testCompile group:'junit', name: 'junit', version: '4.12'

  //testcontainer
  testCompile "org.testcontainers:testcontainers:1.14.1"

  //redis client
  compile 'io.lettuce:lettuce-core:5.3.0.RELEASE'
}

// make sure your environment is set up correctly!
task checkEnvironment {
  doFirst {
    if(JavaVersion.current() != javaVersion) {
      throw new GradleException("Configured version of Java (${javaVersion}) is different than the host version (${JavaVersion.current()})")
    }

    println "Spring Boot profiles: ${profiles}"
    println "Java: ${javaVersion} (${env.JAVA_VERSION})"
  }
}

compileJava.dependsOn checkEnvironment
