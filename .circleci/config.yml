
version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build:
    # Remove if parallelism is not desired
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1"
    docker: # run the steps with Docker
      - image: circleci/openjdk:11.0.3-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests in parallel # See: https://circleci.com/docs/2.0/parallelism-faster-jobs/
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            ./gradlew test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:  # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data
          path: ~/test-results
      - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: ~/test-results/junit         
      - run:
          name: Assembling JARs
          command: |
              ./gradlew :api:bootJar
              ./gradlew :site:bootJar
      - store_artifacts:
          path: api/build/libs
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - .
        

  # Heroku
  deploy:
    machine:
        enabled: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Setup Heroku and Deploy
          command: |
            bash .circleci/setup-heroku.sh
            heroku config: set: URL_API=$HEROKU_APP_NAME_API --app $HEROKU_APP_NAME_SERVER
            cd api
            heroku deploy:jar "build/libs/api##1.0.0.null.jar" --app $HEROKU_APP_NAME_API
            cd ../site
            heroku deploy:jar "build/libs/site##1.0.0.null.jar" --app $HEROKU_APP_NAME_SERVER
            

  build_playwright:
    working_directory: ~/project/e2e
    docker:
      - image: mcr.microsoft.com/playwright:bionic
        environment:
          NODE_ENV: development # Needed if playwright is in `devDependencies`

    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Installing Playwright
          command: |
            cd e2e
            npm ci
            npx folio



# # Node & Playwright
#  orbs:
#   node: circleci/node@4.1.0
#  test:
#     executor: node/default
#     steps:
#       - checkout
#       - node/install-packages:
#           cache-path: e2e
#           overrise-ci-command: npm install 

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: dev
      - build_playwright:
          requires:
            - build
          filters:
            branches:
              only: dev
