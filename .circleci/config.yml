version: 2
orbs:
  heroku: circleci/heroku@1.2.4
jobs:
  build:
    # Remove if parallelism is not desired
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1"
      HEROKU_APP_NAME: "thawing-beach-30413"
    docker: # run the steps with Docker
      - image: circleci/openjdk:11.0.3-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests in parallel # See: https://circleci.com/docs/2.0/parallelism-faster-jobs/
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            ./gradlew test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:  # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data
          path: ~/test-results
      - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: ~/test-results/junit         
      - run:
          name: Assemble JAR
          command: |
              ./gradlew assemble
          # As the JAR was only assembled in  the first build container, build/libs will be empty in all the other build containers
      # - store_artifacts:
      #     command: |
      #     path: /api/build/libs
      #     destination: jars
          
      # run a script to set up Heroku
      
    


  deploy:
    machine:
        enabled: true
    working_directory: ~/project/
    # environment:
    #   HEROKU_APP_NAME: $HEROKU_APP_NAME # define env var $HEROKU_APP_NAME https://$HEROKU_APP_NAME.herokuapp.com
      # HEROKU_API_KEY: $HEROKU_API_KEY
    steps:
      - checkout
      - run:
          name: Setup Heroku
          command: |
            bash .circleci/setup-heroku.sh
          # run a script to set up Heroku

      - run:
          command: |
            git add /api/build/libs/api##1.0.0.null.jar heroku dev:main
            git commit -m"heroku"
            git push heroku dev:main
            sleep 5 # sleep for 5 seconds to wait for dynos
            heroku restart

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: dev
