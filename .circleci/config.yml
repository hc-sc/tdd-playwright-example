
version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build:
    # Remove if parallelism is not desired
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1"
    docker: # run the steps with Docker
      - image: circleci/openjdk:11.0.3-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests in parallel # See: https://circleci.com/docs/2.0/parallelism-faster-jobs/
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            SERVICE_URL=https://$HEROKU_APP_NAME_SERVER.herokuapp.com ./gradlew test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:  # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data
          path: ~/test-results
      - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: ~/test-results/junit         
      - run:
          name: Assembling JARs
          command: |
             SERVICE_URL=https://$HEROKU_APP_NAME_SERVER.herokuapp.com ./gradlew :api:bootJar
             API_URL=https://$HEROKU_APP_NAME_API.herokuapp.com  ./gradlew :site:bootJar
      - store_artifacts:
          path: api/build/libs
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - .
  # https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
  # containerize:
  deploy:
    machine:
        enabled: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Setting up heroku
          command: |
            bash .circleci/setup-heroku.sh
      - run:
          name: Build and push api image to heroku
          command: |
            heroku container:login
            cd api
            heroku container:push web --app $HEROKU_APP_NAME_API
            heroku container:release web --app $HEROKU_APP_NAME_API
            cd ../site
            heroku container:push web --app $HEROKU_APP_NAME_SERVER
            heroku container:release web --app $HEROKU_APP_NAME_SERVER
            cd ..

      

  # deploy:
  #   docker:
  #     - image: circleci/openjdk:11.0.3-jdk-stretch
  #       auth:
  #         username: mydockerhub-user
  #         password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: .
  #     - restore_cache:
  #         keys:
  #           - v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
  #           - v1-gradle-cache-{{ checksum "build.gradle" }}
  #     - run:
  #         name: Creating and deploying container
  #         command: |
  #           bash .circleci/setup-heroku.sh
  #           cd api
  #           docker build -t tdd-playwright-example-api .
  #           heroku container:push web --app tdd-playwright-example-api 
  # Dockerizing Deployment
  # minimal_core:
  #   machine:
  #     enabled: true
  #   steps:
  #   - checkout
  #   - run:
  #       command: ./gradlew --no-daemon --continue --scan testcontainers:test --tests '*GenericContainerRuleTest'
  #   - run:
  #       name: Save test results
  #       command: |
  #         mkdir -p ~/junit/
  #         find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
  #       when: always
  #   - store_test_results:
  #       path: ~/junit
  #   - store_artifacts:
  #       path: ~/junit

  # # Heroku
  # deploy:
  #   machine:
  #       enabled: true
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: .
  #     - restore_cache:
  #         keys:
  #           - v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
  #           - v1-gradle-cache-{{ checksum "build.gradle" }}
  #     - run:
  #         name: Setup Heroku and Deploy
  #         command: |
  #           bash .circleci/setup-heroku.sh
  #           heroku config:set SERVER_URL=https://$HEROKU_APP_NAME_SERVER.herokuapp.com --app $HEROKU_APP_NAME_API
  #           heroku config:set API_URL=https://$HEROKU_APP_NAME_API.herokuapp.com --app $HEROKU_APP_NAME_SERVER

  #           cd api
  #           heroku deploy:jar "build/libs/api##1.0.0.1.jar" --app $HEROKU_APP_NAME_API
  #           cd ../site
  #           heroku deploy:jar "build/libs/site##1.0.0.1.jar" --app $HEROKU_APP_NAME_SERVER
  #     - save_cache:
  #         paths:
  #           - ~/.gradle/wrapper
  #         key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
  #     - save_cache:
  #         paths:
  #           - ~/.gradle/caches
  #         key: v1-gradle-cache-{{ checksum "build.gradle" }}
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .
            
  #Playwright
  playwright:
    working_directory: ~/project/
    docker:
      - image: mcr.microsoft.com/playwright:bionic
        environment:
          NODE_ENV: development # Needed if playwright is in `devDependencies`

    steps:
      - checkout
      - restore_cache:
          paths:
            - ~/project/e2e/cache
          keys:
            - v2-npm-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Playwright Installation and Testing
          command: | # BASE_URL=$HEROKU_APP_NAME_SERVER is the env variable being tested upon
            cd e2e
            npm ci
            export BASE_URL="https://"$HEROKU_APP_NAME_SERVER".herokuapp.com"
            FOLIO_JUNIT_OUTPUT_NAME=test-results/playwright_e2e_junit.xml npx folio --reporter=junit,line --param slowMo=1000 screenshotOnFailure
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/e2e/
            find . -type f -regex ".*/.*xml" -exec cp {} ~/test-results/e2e/ \;
            find . -type d -regex ".*/e2e/test-results/src/test/*" -exec cp {} -r ~/test-results/e2e/ \;
          when: always
      - store_test_results:  # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data
          path: ~/test-results
      - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: ~/test-results/e2e
      - save_cache:
          paths:
            - ~/project/e2e/cache
          key: v2-npm-deps-{{ checksum "package-lock.json" }}

workflows:
  version: 2
#   test_all:
#     jobs:
#     - minimal_core

  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: billy
      - playwright: # Make sure to add colon back in when adding conditions
          requires:
            - build
            - deploy
          filters:
            branches:
              only: dev
