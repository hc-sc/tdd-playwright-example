/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export declare type Configuration = {
    name: string;
    value: string | number | boolean | undefined;
}[];
export declare type Parameters = {
    [key: string]: string | number | boolean | null | undefined;
};
export declare type TestStatus = 'passed' | 'failed' | 'timedOut' | 'skipped';
export declare type TestBeginPayload = {
    testId: string;
    workerIndex: number;
};
export declare type TestError = {
    message?: string;
    stack?: string;
    value?: string;
};
export declare type TestEndPayload = {
    testId: string;
    duration: number;
    status?: TestStatus;
    error?: TestError;
    data: any;
};
export declare type TestEntry = {
    testId: string;
    retry: number;
    timeout: number;
    expectedStatus: TestStatus;
    skipped: boolean;
};
export declare type RunPayload = {
    file: string;
    entries: TestEntry[];
    parametersString: string;
    parameters: Parameters;
    hash: string;
    repeatEachIndex: number;
};
export declare type DonePayload = {
    failedTestId?: string;
    fatalError?: any;
    remaining: TestEntry[];
};
export declare type TestOutputPayload = {
    testId?: string;
    text?: string;
    buffer?: string;
};
//# sourceMappingURL=ipc.d.ts.map