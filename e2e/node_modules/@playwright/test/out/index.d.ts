/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { Browser, BrowserContext, BrowserContextOptions, BrowserType, LaunchOptions, Page } from 'playwright';
export { expect, config } from 'folio';
declare type PlaywrightParameters = {
    browserName: 'chromium' | 'firefox' | 'webkit';
    headful: boolean;
    platform: 'win32' | 'linux' | 'darwin';
    screenshotOnFailure: boolean;
    slowMo: number;
    video: boolean;
};
declare type PlaywrightWorkerFixtures = {
    playwright: typeof import('playwright');
    browserType: BrowserType<Browser>;
    browserOptions: LaunchOptions;
    browser: Browser;
    isChromium: boolean;
    isFirefox: boolean;
    isWebKit: boolean;
    isWindows: boolean;
    isMac: boolean;
    isLinux: boolean;
};
declare type PlaywrightTestFixtures = {
    contextOptions: BrowserContextOptions;
    contextFactory: (options?: BrowserContextOptions) => Promise<BrowserContext>;
    context: BrowserContext;
    page: Page;
};
export declare const folio: import("folio").Folio<{
    testInfo: import("folio").TestInfo;
    testParametersPathSegment: string;
} & PlaywrightTestFixtures, {
    testWorkerIndex: number;
} & PlaywrightWorkerFixtures, PlaywrightParameters>;
export declare const it: {
    (name: string, inner: (fixtures: PlaywrightParameters & {
        testWorkerIndex: number;
    } & PlaywrightWorkerFixtures & {
        testInfo: import("folio").TestInfo;
        testParametersPathSegment: string;
    } & PlaywrightTestFixtures) => void | Promise<void>): void;
    (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: (fixtures: PlaywrightParameters & {
        testWorkerIndex: number;
    } & PlaywrightWorkerFixtures & {
        testInfo: import("folio").TestInfo;
        testParametersPathSegment: string;
    } & PlaywrightTestFixtures) => void | Promise<void>): void;
} & {
    only: {
        (name: string, inner: (fixtures: PlaywrightParameters & {
            testWorkerIndex: number;
        } & PlaywrightWorkerFixtures & {
            testInfo: import("folio").TestInfo;
            testParametersPathSegment: string;
        } & PlaywrightTestFixtures) => void | Promise<void>): void;
        (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: (fixtures: PlaywrightParameters & {
            testWorkerIndex: number;
        } & PlaywrightWorkerFixtures & {
            testInfo: import("folio").TestInfo;
            testParametersPathSegment: string;
        } & PlaywrightTestFixtures) => void | Promise<void>): void;
    };
    skip: {
        (name: string, inner: (fixtures: PlaywrightParameters & {
            testWorkerIndex: number;
        } & PlaywrightWorkerFixtures & {
            testInfo: import("folio").TestInfo;
            testParametersPathSegment: string;
        } & PlaywrightTestFixtures) => void | Promise<void>): void;
        (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: (fixtures: PlaywrightParameters & {
            testWorkerIndex: number;
        } & PlaywrightWorkerFixtures & {
            testInfo: import("folio").TestInfo;
            testParametersPathSegment: string;
        } & PlaywrightTestFixtures) => void | Promise<void>): void;
    };
};
export declare const fit: {
    (name: string, inner: (fixtures: PlaywrightParameters & {
        testWorkerIndex: number;
    } & PlaywrightWorkerFixtures & {
        testInfo: import("folio").TestInfo;
        testParametersPathSegment: string;
    } & PlaywrightTestFixtures) => void | Promise<void>): void;
    (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: (fixtures: PlaywrightParameters & {
        testWorkerIndex: number;
    } & PlaywrightWorkerFixtures & {
        testInfo: import("folio").TestInfo;
        testParametersPathSegment: string;
    } & PlaywrightTestFixtures) => void | Promise<void>): void;
};
export declare const xit: {
    (name: string, inner: (fixtures: PlaywrightParameters & {
        testWorkerIndex: number;
    } & PlaywrightWorkerFixtures & {
        testInfo: import("folio").TestInfo;
        testParametersPathSegment: string;
    } & PlaywrightTestFixtures) => void | Promise<void>): void;
    (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: (fixtures: PlaywrightParameters & {
        testWorkerIndex: number;
    } & PlaywrightWorkerFixtures & {
        testInfo: import("folio").TestInfo;
        testParametersPathSegment: string;
    } & PlaywrightTestFixtures) => void | Promise<void>): void;
};
export declare const test: {
    (name: string, inner: (fixtures: PlaywrightParameters & {
        testWorkerIndex: number;
    } & PlaywrightWorkerFixtures & {
        testInfo: import("folio").TestInfo;
        testParametersPathSegment: string;
    } & PlaywrightTestFixtures) => void | Promise<void>): void;
    (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: (fixtures: PlaywrightParameters & {
        testWorkerIndex: number;
    } & PlaywrightWorkerFixtures & {
        testInfo: import("folio").TestInfo;
        testParametersPathSegment: string;
    } & PlaywrightTestFixtures) => void | Promise<void>): void;
} & {
    only: {
        (name: string, inner: (fixtures: PlaywrightParameters & {
            testWorkerIndex: number;
        } & PlaywrightWorkerFixtures & {
            testInfo: import("folio").TestInfo;
            testParametersPathSegment: string;
        } & PlaywrightTestFixtures) => void | Promise<void>): void;
        (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: (fixtures: PlaywrightParameters & {
            testWorkerIndex: number;
        } & PlaywrightWorkerFixtures & {
            testInfo: import("folio").TestInfo;
            testParametersPathSegment: string;
        } & PlaywrightTestFixtures) => void | Promise<void>): void;
    };
    skip: {
        (name: string, inner: (fixtures: PlaywrightParameters & {
            testWorkerIndex: number;
        } & PlaywrightWorkerFixtures & {
            testInfo: import("folio").TestInfo;
            testParametersPathSegment: string;
        } & PlaywrightTestFixtures) => void | Promise<void>): void;
        (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: (fixtures: PlaywrightParameters & {
            testWorkerIndex: number;
        } & PlaywrightWorkerFixtures & {
            testInfo: import("folio").TestInfo;
            testParametersPathSegment: string;
        } & PlaywrightTestFixtures) => void | Promise<void>): void;
    };
};
export declare const describe: {
    (name: string, inner: () => void): void;
    (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: () => void): void;
} & {
    only: {
        (name: string, inner: () => void): void;
        (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: () => void): void;
    };
    skip: {
        (name: string, inner: () => void): void;
        (name: string, modifierFn: (modifier: import("folio/out/testModifier").TestModifier, parameters: PlaywrightParameters) => any, inner: () => void): void;
    };
};
export declare const beforeEach: (inner: (fixtures: PlaywrightParameters & {
    testWorkerIndex: number;
} & PlaywrightWorkerFixtures & {
    testInfo: import("folio").TestInfo;
    testParametersPathSegment: string;
} & PlaywrightTestFixtures) => Promise<void>) => void;
export declare const afterEach: (inner: (fixtures: PlaywrightParameters & {
    testWorkerIndex: number;
} & PlaywrightWorkerFixtures & {
    testInfo: import("folio").TestInfo;
    testParametersPathSegment: string;
} & PlaywrightTestFixtures) => Promise<void>) => void;
export declare const beforeAll: (inner: (fixtures: {
    testWorkerIndex: number;
} & PlaywrightWorkerFixtures) => Promise<void>) => void;
export declare const afterAll: (inner: (fixtures: {
    testWorkerIndex: number;
} & PlaywrightWorkerFixtures) => Promise<void>) => void;
//# sourceMappingURL=index.d.ts.map